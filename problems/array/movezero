"""
Problem: Move Zeroes
Platform: LeetCode #283
Difficulty: Easy
Link: https://leetcode.com/problems/move-zeroes/
Time: O(n)
Space: O(1)
"""

from typing import List

class Solution:
    def moveZeroes(self, nums: List[int]) -> None:
        """
        Move all zeros in the list nums to the end in-place while maintaining
        the relative order of the non-zero elements.
        Uses a two-pointer approach: `last_non_zero` tracks where the next
        non-zero should be placed.
        """
        last_non_zero = 0
        for i in range(len(nums)):
            if nums[i] != 0:
                # swap current element with the position last_non_zero
                nums[last_non_zero], nums[i] = nums[i], nums[last_non_zero]
                last_non_zero += 1

# Quick local tests (won't run on LeetCode â€” LeetCode handles input automatically)
if __name__ == "__main__":
    s = Solution()

    arr = [0,1,0,3,12]
    s.moveZeroes(arr)
    print(arr)  # -> [1,3,12,0,0]

    arr = [0,0,1]
    s.moveZeroes(arr)
    print(arr)  # -> [1,0,0]

    arr = [1,2,3]
    s.moveZeroes(arr)
    print(arr)  # -> [1,2,3]
